apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: "kotlin-android-extensions"
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "net.telepathix.petbase"
        minSdkVersion 16
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "net.telepathix.petbase.PetBaseTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "environment"

    productFlavors {
        development {
            dimension "environment"
            applicationIdSuffix ".development"

            buildConfigField 'String', 'BASE_URL', '"http://telepathix.net/petbase/v1/"'
            // to make it easy to test we make the endpoint configurable here - in a normal scenario the URL would be static
            buildConfigField 'String', 'CONFIG_ENDPOINT', '"config.json"'
            //buildConfigField 'String', 'CONFIG_ENDPOINT', '"configCallChat.json"'
            //buildConfigField 'String', 'CONFIG_ENDPOINT', '"configChatOnly.json"'
            //buildConfigField 'String', 'CONFIG_ENDPOINT', '"configCallOnly.json"'
            //buildConfigField 'String', 'CONFIG_ENDPOINT', '"configNone.json"'

            // to test dynamic refresh of the pet list use pets.php which will give a different result each time
            buildConfigField 'String', 'PET_LIST_ENDPOINT', '"pets.json"'
            //buildConfigField 'String', 'PET_LIST_ENDPOINT', '"pets.php"'
        }
        production {
            dimension "environment"

            buildConfigField 'String', 'BASE_URL', '"http://telepathix.net/petbase/v1/"'
            buildConfigField 'String', 'CONFIG_ENDPOINT', '"config.json"'
            buildConfigField 'String', 'PET_LIST_ENDPOINT', '"pets.json"'
        }
    }

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.arch.core:core-common:2.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'

    // Retrofit2
    implementation "com.squareup.retrofit2:retrofit:${retrofit}"
    implementation "com.squareup.retrofit2:converter-jackson:${retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit}"

    // RxJava2
    implementation "io.reactivex.rxjava2:rxjava:${rxjava}"

    // RxAndroid
    implementation "io.reactivex.rxjava2:rxandroid:${rxandroid}"

    // Jackson
    implementation "com.fasterxml.jackson.core:jackson-core:${jackson}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jackson}"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson}"

    // Picasso
    implementation('com.squareup.picasso:picasso:2.71828', {
        exclude group: "com.android.support", module: "support-annotations"
    })

    kapt 'com.android.databinding:compiler:3.1.4'

    testImplementation "androidx.test.ext:junit:1.1.0"
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
}
